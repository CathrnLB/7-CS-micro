#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Touchy Subject
#+AUTHOR: Stephen Brown

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/7-CS-micro">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Touch Interface
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- The Micro:bit also has three general purpose input/output (Called GPIO) connectors along the bottom of the unit. They're labelled 0, 1 and 2. There's also a connector that outputs a steady 3 volts (imagintively labelled 3V) and a connection to the negative end of the power supply (labelled GND). 
- We can use these as touch switches too. 
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Upload the following code to your Micro:bit:
#+begin_src python
from microbit import *

while True:
    if pin0.is_touched():
        display.show(Image.HAPPY)
    elif pin1.is_touched():
        display.show(Image.SAD)
    elif pin2.is_touched():
        display.show(Image.ASLEEP)
#+end_src

- To test the program, hold the =GND= pin with one hand, then touch the =0=, =1= and =2= pins with a fingertip on the other hand. Cool, eh?
- If you're unsure of anything covered so far, this video tutorial will take you through it:
#+BEGIN_HTML
<iframe width="580" height="320" src="https://www.youtube.com/embed/OxEm4uWx6gw" frameborder="0" allowfullscreen></iframe>
#+END_HTML
* Accelerometer
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- There are other sensors on the Micro:bit too. The accelerometer detects how level the Micro:bit is. It can measure in the x, y and z axis. 
- The amount of angle is measured in milli-gâ€™s. A flat, level Micro:bit would report 0, with +25 or -25 being noticably angled.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Lets write some code
#+begin_src python
from microbit import *

while True:
    x_acc = accelerometer.get_x()
    display.clear()

    if x_acc > 25:
        # set_pixel parameters are (xPos, yPos, LEDbrightness)
        display.set_pixel(4, 2, 9)
    elif x_acc < -25:
        display.set_pixel(0, 2, 9)
    else:
        display.set_pixel(2, 2, 9)
#+end_src
- This program reads the x-axis angle of the Micro:bit, then lights an LED as appropriate. Approaching our code like this means that the y-axis is tricky to handle at the same time. 
- With variables, we could also handle the y axis too, though. This way, we could tilt both left-right and up-down. Let's write some pseudocode:
#+begin_src html
X=0
Y=0

WHILE True:
    x_acc = ACCELEROMETER X READING
    y_acc = ACCELEROMETER Y READING
    
    IF x_acc > 25 THEN
        X=4
    ELSE IF x_acc < -25:
        X=0
    ELSE:
        X=2
    END IF

    IF y_acc > 25 THEN
        Y=4
    ELSE IF y_acc < -25
        Y=0
    ELSE
        Y=2
    END IF

    CLEAR THE DISPLAY
    TURN ON THE LED AT POSITION X, Y.
END WHILE
#+end_src
- If you're struggling with the concepts here, the video tutorial may be useful:
#+BEGIN_HTML
<iframe width="580" height="320" src="https://www.youtube.com/embed/1ZDdedIGJso" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Write the program shown above in MicroPython, and test it on your Micro:bit. Upload your code to [[https://www.BourneToLearn.com][BournetoLearn.com]] when done.
- *Gold:* Use =If= statements to add code to use the 'in between' LEDs. 
  - /Hint:/ You might need to work from about 40 to -40 rather than 25 to -25.
#+BEGIN_HTML
<iframe width="560" height="315" src="https://www.youtube.com/embed/YI2RLXgQKjw" frameborder="0" allowfullscreen></iframe>
#+END_HTML
- *Platinum:* Write a race game. The player has to tilt the Micro:bit up and down 20 times, then a smiley face is shown. Players on different Micro:bits can compete to see who's fastest.
  - *Bonus challenge:* Make the game count down 3-2-1 before the race starts.
