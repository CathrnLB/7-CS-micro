#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Making a point
#+AUTHOR: Stephen Brown

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/7-CS-micro">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Lesson1</a></li>
      <li><a href="2_Lesson.html">Lesson2</a></li>
      <li><a href="3_Lesson.html">Lesson3</a></li>
      <li><a href="4_Lesson.html">Lesson4</a></li>
      <li><a href="5_Lesson.html">Lesson5</a></li>
      <li><a href="6_Lesson.html">Lesson6</a></li>
      <li><a href="7_Lesson.html">Lesson7</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* An empty gesture
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- We looked at the accelerometer in the previous lesson. This can also be used to pick up data about the movement of the Micro:bit, in the form of gestures.
- We can write programs to take advantage of these; my favourites are =face up=, =face down= and =shake=. Let's try using one now.
- /Note:/ You can read more about gestures [[http://microbit-micropython.readthedocs.org/en/latest/tutorials/gestures.html#gestures][here]].
- Try this:
#+begin_src python
from microbit import *

while True:
    gesture = accelerometer.current_gesture()
    if gesture == "shake":
        display.show(Image.HAPPY)
        sleep(2000)
    else:
        display.show(Image.ASLEEP)
#+end_src
* Compass
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- The Micro:bit also has a built-in electronic compass.
- It reads the Earth's magnetic field, and uses this to give a bearing on which way the Micro:bit is facing, from 0 to 359 degrees. 0 degrees is North, 90 is East, 180 is South and so on.
- The compass will need calibrating first so that it knows which way to point. 
- Once done, you can either show the bearing number on the screen, or be a little more ambitious and use an LED on the display to point out the direction. 
- Let's start simple. Our pseudocode for this is:

#+begin_src
CALIBRATE COMPASS

WHILE True
    myHeading = READ_COMPASS_HEADING
    PRINT myHeading
END WHILE
#+end_src

- /Note:/ You can get more detail on the capabilities of the compass by looking through the documentation for MicroPython [[http://microbit-micropython.readthedocs.org/en/latest/compass.html][here]]. 
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Let's write some code now...
#+begin_src
from microbit import *
compass.calibrate()

while True:
    myHeading = compass.heading()
    display.scroll(str(myHeading))
#+end_src
- After you complete the calibration sequence (tilt and roll the Micro:bit around in a circle), you'll get readings showing which way is North. 
- *NOTE:* If you're using this inside, nearby metal objects and equipment using magnets (e.g. speakers, motors) can affect the accurate of the compass quite significantly). 
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Using variables and =If= statements, we can make something a little more like a compass. 
- I'd like to make the Micro:bit show a letter to indicate direction as I rotate the Micro:bit round. It won't be super-accurate, but it'll give an indication for the user.
  - From 46 to 135 degrees, we'll show *E*.
  - From 136 to 225 degrees, we'll show *S*.
  - From 226 to 315 degrees, we'll show *W*.
  - Finally, let's say that for a bearing of less than 46 or greater than 316 degrees, the Micro:bit should say *N*.
- Our pseudocode will need to be something like this:              
#+begin_src
CALIBRATE COMPASS

WHILE True
    myHeading = READ_COMPASS_HEADING
    
    IF myHeading < 46 or myHeading > 316
        PRINT "N"
    ELSE IF myHeading < 136
        PRINT "E"
    ELSE IF myHeading < 226
        PRINT "S"
    ELSE
        PRINT "W"
    END IF
END WHILE
#+end_src
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Let's write the program...
#+begin_src python
from microbit import *
compass.calibrate()

while True:
    myHeading = compass.heading()
    
    if myHeading < 46 or myHeading > 316:
        display.show("N")
    elif myHeading < 136:
        display.show("E")
    elif myHeading < 226:
        display.show("S")
    else:
        display.show("W")
#+end_src
- If you're struggling to understand where the numbers above come from, the video tutorial below goes through it in more detail:
#+BEGIN_HTML
<iframe width="580" height="320" src="https://www.youtube.com/embed/kOv5PKBsGtg" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Write a program to show a smiley face when the Micro:bit is pointing North, and a different image when pointing South. 
- *Gold:* Add an emergency feature to your digital compass by making the display "SOS" across the display when the A button is pushed, and if B is pushed, flashing all the LEDs to spell out "SOS" in [[https://en.wikipedia.org/wiki/Morse_code][Morse code]].
- *Platinum:* Use the LED display to make the Micro:bit always point out north as is is rotated. I.e. If the Micro:bit is pointing north, the LED located at (2, 0) should be on. If it's pointing west the LED at (4, 2) should be on, pointing north-west should turn on (4, 0) and so on.
