#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Curious Conditionals
#+AUTHOR: Stephen Brown

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/7-CS-micro">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* A Mu Direction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- We've used the [[https://www.microbit.co.uk/create-code][browser-based IDE]] for our Micro:bit, but it's a little nicer working in a proper application when we need to find problems with our code. We're going to use a program called /Mu/ from this point forward. You can use this method, or the web browser version from last lesson with your Micro:bit at home.
- *NOTE:* You can download /Mu/ for use at home [[https://s3-us-west-2.amazonaws.com/ardublockly-builds/microbit/windows/mu-2016-03-21_08_49_17.exe][here]] (Windows) or [[https://s3-us-west-2.amazonaws.com/ardublockly-builds/microbit/osx/mu-2016-03-14_21_09_19.zip][here]] (MacOS). 
- Start by loading /Mu/ from the Open drive, in this folder:
- =G:\Computing 2015-2016\Y7\BBC MicroBit= 
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Previously, we looked at how using variables can allow our Micro:bit programs to be more flexible. We'll look today at how using =If= commands and some variables can make our programs more powerful. 
- =If= allows you to check if a particular statement is true, then carries out some instructions and then moves to the next instructions outside the =If= block. 
- We can also add =Elif= and =Else= commands with a seperate set of instructions to tell the computer what to do in different situations. The pseudocode below gives an example of an =If= block:
#+begin_src
hungerLevel = input("From 0-10, how hungry are you? ")

IF hungerLevel == 10:
    PRINT "Eat a proper dinner"
ELIF hungerLevel > 5:
    PRINT "Eat a sandwich"
ELIF hungerLevel > 2 :
    PRINT "Eat an apple"
ELSE:
    PRINT "Wait until later"
END IF

PRINT "Thank you for using the food guide."
#+end_src 
- If the user enters 10, the first =If= statement is true, so the user will be told to eat a proper dinner. The program then leaves the =If= block (Shown by writing =END IF= here) and the user is thanked for using the app. 
- If they'd entered 9, a sandwich is recommended, then they're thanked.
- Entering 5 would advise the user to eat an apple, then they're thanked. /Why is that?/
- A user who who chooses 1, -5 or 0 would be advised to wait until later, and is then thanked. This is because none of the other statements in the =If= block were true. 
- If you're still unsure, this video tutorial gives another example, using Scratch:
#+BEGIN_HTML
<iframe width="540" height="320" src="https://www.youtube.com/embed/aqeDBeA1dqg" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Let's write a program to make the Micro:bit work as a simple torch. We can write some simple pseudocode to express what we want to achieve:
#+begin_src
WHILE True
    IF button A is pushed:
        Turn all LEDs on
    ELSE IF button B is pushed:
        Turn all LEDs off
    ELSE:
        DO NOTHING
    END IF
END WHILE
#+end_src
- By using IF statements in this way, the LEDs instructions are only carried out when the appropriate button is pushed.
- Let's code it! Clear the exmple code, paste this into the /Mu/ window
#+begin_src python
from microbit import *

while True:
    if button_a.is_pressed():
        display.show(Image.CHESSBOARD)
    elif button_b.is_pressed():
        display.clear()
#+end_src
- Click the =Flash= button at the top of the window to push your program to the Micro:bit.
- Did you notice that we didn't add an =else= line to match the one in our pseudocode? As we don't want to take any action if a button isn't pushed, we don't need to write any code.
- *Challenge:* Can you remix the code above to write a happy/sad program? If the user pushes button A, the =HAPPY= image should be loaded onto the screen. If they push B, =SAD= should be shown. If they push nothing, the image should change to =ASLEEP=.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Combining =If= with variables allows us to start to make more useful programs.
- We could make a simple counting app to help a toddler learn their first few numbers. Starting at zero, the buttons could be used to show the digits from 0-9 o the display.
- Our pseudocode could be something like:
#+begin_src
currentNumber=0

WHILE True:
    IF buttonA pushed:
        DECREASE currentNumber BY 1
        PRINT currentNumber
    ELSE IF buttonB pushed:
        INCREASE currentNumber BY 1
        PRINT currentNumber
    ENDIF
WHILE END
#+end_src
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Copy this code to your Micro:bit...
#+begin_src python
from microbit import *
currentNumber = 0

while True:
    if button_a.is_pressed():
        currentNumber -= 1
        display.scroll(str(currentNumber))
    elif button_b.is_pressed():
        currentNumber += 1
        display.scroll(str(currentNumber))
#+end_src
- *Question:* Why is the =currentNumber = 0= line sat above the =While True:= line? What would happen if it was inside the WHILE loop?

- With this code working, could we improve it?
- I only want the program to show the numbers 0-9, but at the moment it'll give me negative numbers, and will count beyond 9.
- Programmers can add =If= statements inside other =if= statements (we call this nesting) to produce even more powerful programs. We just need to remember to tab in the code correctly to tell the computer which commands are in our =If= block and which aren't.
- If you're finding the concepts tricky, the video tutorial below will walk you through what you need to know:
#+BEGIN_HTML
<iframe width="540" height="320" src="https://www.youtube.com/embed/_tEnUclQdFA" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Modify the code above to start at 6, and show the 6 times table forwards and backwards. Upload your code to BourneToLearn.com. 
- *Gold:* Change the code back to a counting up and down (one at a time) program, but modify the code so that the user can't make the numbers go above 9 or below 0. 
- You should be able to do this with two new lines of code. This might give you a step in the right direction:
#+begin_src python
if currentNumber >= 1:
#+end_src
- *Platinum:* Write an app to count down from 10 to 0 (without the Micro:bit needing to be touched), then show a smiley face. 
   - *BONUS CHALLENGE:* If the user pushes one of the buttons during the countdown, it should show a sad face instead. Once a button is pushed, the numbers should stop counting.
